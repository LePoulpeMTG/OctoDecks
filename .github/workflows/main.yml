name: Update OctoBase

on:
  # Déclencheur automatique : tous les jours à 02 h UTC
  schedule:
    - cron: '0 2 * * *'
  # Déclencheur manuel via bouton "Run workflow"
  workflow_dispatch:

jobs:
  update:
    runs-on: ubuntu-latest

    steps:
      # 1) Récupère le code du dépôt
      - uses: actions/checkout@v4

      # 2) Installe Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # 3) Installe les dépendances nécessaires
      - name: Install Python dependencies
        run: pip install ijson tqdm requests firebase-admin
      # 3.5) Purge la BD
      - name: Purge DB dans Firebase
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FIREBASE_BUCKET:          ${{ secrets.FIREBASE_BUCKET }}
        run: |
          python - <<'PY'
          import json, os, firebase_admin
          from firebase_admin import credentials, storage
          if not firebase_admin._apps:
              cred = credentials.Certificate(json.loads(os.environ['FIREBASE_SERVICE_ACCOUNT']))
              firebase_admin.initialize_app(cred, { 'storageBucket': os.environ['FIREBASE_BUCKET'] })
          blob = storage.bucket().blob("octobase/octobase_reference.db")
          if blob.exists():
              blob.delete(); print("✅ Ancienne DB supprimée du bucket")
          else:
              print("ℹ️  Aucune DB à supprimer")
          PY
          
      - name: DEBUG prices_daily_set
        run: |
          sqlite3 database/octobase_reference.db \
            "PRAGMA table_info(prices_daily_set);"

      # 4) Exécute le script d'import
      - name: Supprimer ancienne base
        run: rm -f database/octobase_reference.db 

      - name: Create database folder
        run: mkdir -p database
      - name: DEBUG table prices_daily_set
        run: |
          sqlite3 database/octobase_reference.db \
            "PRAGMA table_info(prices_daily_set);"

      - name: Run importer script
        run: python tools/import_all_cards.py

      # 5) Charge la base SQLite dans Firebase Storage

      
      - name: Upload DB to Firebase
        env:
          FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          FIREBASE_BUCKET:          ${{ secrets.FIREBASE_BUCKET }}
        run: |
          python - <<'PY'
            from datetime import datetime
            import json, os, firebase_admin
            from firebase_admin import credentials, storage as fb_storage

            # --- Init Firebase ---
            cred = credentials.Certificate(json.loads(os.environ['FIREBASE_SERVICE_ACCOUNT']))
            firebase_admin.initialize_app(cred, {
                'storageBucket': os.environ['FIREBASE_BUCKET']
            })

            bucket = fb_storage.bucket()

            # 1) Upload / écrase la base SQLite
            bucket.blob("octobase/octobase_reference.db") \
                  .upload_from_filename(
                      "database/octobase_reference.db",
                      content_type="application/octet-stream"
                  )

            # 2) Upload / écrase le JSON quotidien
            today = datetime.utcnow().strftime("%Y-%m-%d")
            bucket.blob(f"prices/daily/{today}.json") \
                  .upload_from_filename(
                      "prices_daily.json",
                      content_type="application/json"
                  )

            print("✅ Upload DB + JSON terminé")

          PY
